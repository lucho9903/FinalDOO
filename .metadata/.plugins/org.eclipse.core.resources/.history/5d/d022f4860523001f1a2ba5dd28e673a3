package co.edu.uco.deviucopay.business.usecase.impl.cuenta;

import java.util.UUID;

import co.edu.uco.deviucopay.business.assembler.entity.impl.AfiliadoAssemblerEntity;
import co.edu.uco.deviucopay.business.assembler.entity.impl.CuentaAssemblerEntity;
import co.edu.uco.deviucopay.business.domain.CuentaDomain;
import co.edu.uco.deviucopay.business.usecase.UseCaseWithoutReturn;
import co.edu.uco.deviucopay.crosscutting.exceptions.customs.BusinessDeviUcopayException;
import co.edu.uco.deviucopay.crosscutting.helpers.ObjectHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.TextHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.UUIDHelper;
import co.edu.uco.deviucopay.data.dao.factory.DAOFactory;
import co.edu.uco.deviucopay.entity.CuentaEntity;

public final class RegistrarCuenta implements UseCaseWithoutReturn<CuentaDomain> {

    private DAOFactory factory;

    public RegistrarCuenta(final DAOFactory factory) {
        if (ObjectHelper.getObjectHelper().isNull(factory)) {
            var mensajeUsuario = "Se ha presentado un problema tratando de llevar a cabo el registro de una cuenta";
            var mensajeTecnico = "El DAOFactory para crear la cuenta lleg√≥ nulo.";
            throw new BusinessDeviUcopayException(mensajeTecnico, mensajeUsuario);
        }
        this.factory = factory;
    }

    @Override
	public void execute(final CuentaDomain data) {
		
		validarCuenta(data.getNumeroCuenta());
		
		validarFormatoCorreo(data.getCorreo());
		
		validar(data.getDireccion());

		validarSedeMismoNombreMismoParqueaero(data.getNombre(), data.getParqueadero().getId());

		validarMismoCorreo(data.getCorreoElectronico());

		validarSedeMismaDireccionMismoParqueadero(data.getDireccion(), data.getParqueadero().getId());

		validarCantidadCeldas(data.getCeldasCarro(), data.getCeldasMoto(), data.getCeldascamion());

		var sedeEntity = SedeEntity.build().setId(generarIdentificadorSede())
				.setParqueadero(ParqueaderoAssemblerEntity.getInstance().toEntity(data.getParqueadero()))
				.setNombre(data.getNombre()).setCiudad(CiudadAssemblerEntity.getInstance().toEntity(data.getCiudad()))
				.setDireccion(data.getDireccion()).setCorreoElectronico(data.getCorreoElectronico())
				.setCeldasCarro(data.getCeldasCarro()).setCeldasMoto(data.getCeldasMoto())
				.setCeldascamion(data.getCeldascamion())
				.setTipoSede(TipoSedeAssemblerEntity.getInstance().toEntity(data.getTipoSede()))
				.setPais(PaisAssemblerEntity.getInstance().toEntity(data.getPais()))
				.setDepartamento(DepartamentoAssemblerEntity.getInstance().toEntity(data.getDepartamento()));

		factory.getSedeDAO().crear(sedeEntity);
	}

	private final UUID generarIdentificadorSede() {
		UUID id = UUIDHelper.generate();
		boolean existeId = true;

		while (existeId) {
			id = UUIDHelper.generate();
			var sedeEntity = SedeEntity.build().setId(id);
			var resultados = factory.getSedeDAO().consultar(sedeEntity);
			existeId = !resultados.isEmpty();
		}
		return id;
	}

	private void validarSede(final String nombreSede) {
		if (TextHelper.isNullOrEmpty(nombreSede)) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00057);
			throw new BusinessGPException(mensajeUsuario);
		}

		if (nombreSede.length() < 1) {
			var mensajeUsuario = TextHelper
					.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00065), nombreSede);
			throw new BusinessGPException(mensajeUsuario);
		}

		if (nombreSede.length() > 60) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00066);
			throw new BusinessGPException(mensajeUsuario);
		}

	}

	private void validarFormatoCorreo(final String correo) {
		if (TextHelper.isNullOrEmpty(correo)) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00058);
			throw new BusinessGPException(mensajeUsuario);
		}

		if (!correo.matches("^[\\w.-]+@[\\w.-]+\\.[a-zA-Z]{2,}$")) {
			var mensajeUsuario = TextHelper
					.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00059), correo);
			throw new BusinessGPException(mensajeUsuario);
		}
	}

	private void validarDireccion(final String direccion) {
		if (TextHelper.isNullOrEmpty(direccion)) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00061);
			throw new BusinessGPException(mensajeUsuario);
		}

		if (direccion.length() < 1) {
			var mensajeUsuario = TextHelper
					.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00067), direccion);
			throw new BusinessGPException(mensajeUsuario);
		}

		if (direccion.length() > 60) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00068);
			throw new BusinessGPException(mensajeUsuario);
		}
	}

	private void validarCantidadCeldas(final int celdasCarro, final int celdasMoto, final int celdasCamion) {
		if (celdasCarro < 0) {
			var mensajeUsuario = TextHelper.reemplazarParametro(
					MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00063), "celdasCarro");
			throw new BusinessGPException(mensajeUsuario);
		}

		if (celdasMoto < 0) {
			var mensajeUsuario = TextHelper.reemplazarParametro(
					MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00063), "celdasMoto");
			throw new BusinessGPException(mensajeUsuario);
		}

		if (celdasCamion < 0) {
			var mensajeUsuario = TextHelper.reemplazarParametro(
					MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00063), "celdasCamion");
			throw new BusinessGPException(mensajeUsuario);
		}

		if (celdasCarro + celdasMoto + celdasCamion == 0) {
			var mensajeUsuario = TextHelper.reemplazarParametro(
					MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00064), "celdasCarro", "celdasMoto",
					"celdasCamion");
			throw new BusinessGPException(mensajeUsuario);
		}
	}

	private void validarSedeMismoNombreMismoParqueaero(final String nombreSede, final UUID idParqueadero) {
		var sedeEntity = SedeEntity.build().setNombre(nombreSede)
				.setParqueadero(ParqueaderoEntity.build().setId(idParqueadero));

		var resultados = factory.getSedeDAO().consultar(sedeEntity);

		if (!resultados.isEmpty()) {
			var mensajeUsuario = TextHelper
					.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00056), nombreSede);
			throw new BusinessGPException(mensajeUsuario);
		}

	}

	private void validarSedeMismaDireccionMismoParqueadero(final String direccion, final UUID idparqueadero) {
		var sedeEntity = SedeEntity.build().setDireccion(direccion)
				.setParqueadero(ParqueaderoEntity.build().setId(idparqueadero));

		var resultados = factory.getSedeDAO().consultar(sedeEntity);

		if (!resultados.isEmpty()) {
			var mensajeUsuario = TextHelper
					.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00062), direccion);
			throw new BusinessGPException(mensajeUsuario);
		}
	}

	private void validarMismoCorreo(final String correo) {
		var sedeEntity = SedeEntity.build().setCorreoElectronico(correo);

		var resultados = factory.getSedeDAO().consultar(sedeEntity);

		if (!resultados.isEmpty()) {
			var mensajeUsuario = TextHelper
					.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00060), correo);
			throw new BusinessGPException(mensajeUsuario);
		}
	}
}