package co.edu.uco.deviucopay.crosscutting.exceptions.messageCatalog.impl;
import java.util.HashMap;
import java.util.Map;

import co.edu.uco.deviucopay.crosscutting.exceptions.customs.CrossCuttingDeviUcopayException;
import co.edu.uco.deviucopay.crosscutting.exceptions.messageCatalog.MessageCatalog;
import co.edu.uco.deviucopay.crosscutting.exceptions.messageCatalog.data.CodigoMensaje;
import co.edu.uco.deviucopay.crosscutting.exceptions.messageCatalog.data.Mensaje;
import co.edu.uco.deviucopay.crosscutting.helpers.ObjectHelper;

public class MessageCatalogBase implements MessageCatalog {


	private final Map<String, Mensaje> mensajes= new HashMap<>();
	
	@Override
	public final void inicializar() {mensajes.put(CodigoMensaje.M00001.getIdentificador(), new Mensaje(CodigoMensaje.M00001,
			"El código del mensaje que quiere obtener del catálogo mensajes llegó nulo..."));
	mensajes.put(CodigoMensaje.M00002.getIdentificador(), new Mensaje(CodigoMensaje.M00002,
			"Se ha presentado un problema tratando de llevar a cabo la operación deseada..."));
	mensajes.put(CodigoMensaje.M00003.getIdentificador(), new Mensaje(CodigoMensaje.M00003,
			"El identificador del mensaje \"${1}\" que se intentó obtener, no está en el catálogo de mensajes base..."));
	mensajes.put(CodigoMensaje.M00004.getIdentificador(), new Mensaje(CodigoMensaje.M00004,
			"El mensaje con identificador \"${1}\" que se intentó obtener, no está configurado para residir en el catálogo de mensajes base..."));
	mensajes.put(CodigoMensaje.M00005.getIdentificador(), new Mensaje(CodigoMensaje.M00005,
			"El mensaje con identificador \"${1}\" que se intentó obtener, no está configurado para residir en el catálogo de mensajes externo..."));
	mensajes.put(CodigoMensaje.M00006.getIdentificador(), new Mensaje(CodigoMensaje.M00006,
			"El identificador del mensaje \"${1}\" que se intentó obtener, no está en el catálogo de mensajes externo..."));

	mensajes.put(CodigoMensaje.M00007.getIdentificador(), new Mensaje(CodigoMensaje.M00007,
			"Se ha presentado un problema tratando de validar si la conexión SQL con la fuente de información deseada estaba cerrada..."));
	mensajes.put(CodigoMensaje.M00008.getIdentificador(), new Mensaje(CodigoMensaje.M00008,
			"Se ha presentado un problema INESPERADO tratando de validar si la conexión SQL con la fuente de información deseada estaba cerrada..."));
	mensajes.put(CodigoMensaje.M00009.getIdentificador(), new Mensaje(CodigoMensaje.M00009,
			"Se ha intentado realizar el cierre de una conexión SQL que ya estaba cerrada..."));
	mensajes.put(CodigoMensaje.M00010.getIdentificador(), new Mensaje(CodigoMensaje.M00010,
			"Se ha presentado un problema tratando de cerrar la conexión SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00011.getIdentificador(), new Mensaje(CodigoMensaje.M00011,
			"Se ha presentado un problema INESPERADO tratando de cerrar la conexión SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00012.getIdentificador(), new Mensaje(CodigoMensaje.M00012,
			"Se ha intentado confirmar una transacción con una conexión SQL cerrada..."));
	mensajes.put(CodigoMensaje.M00013.getIdentificador(), new Mensaje(CodigoMensaje.M00013,
			"Se ha intentado confirmar una transacción cuando el autocommit de la conexión con la base de datos estaba activado..."));
	mensajes.put(CodigoMensaje.M00014.getIdentificador(), new Mensaje(CodigoMensaje.M00014,
			"Se ha presentado un problema tratando de confirmar una transacción SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00015.getIdentificador(), new Mensaje(CodigoMensaje.M00015,
			"Se ha presentado un problema INESPERADO tratando de confirmar una transacción SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00016.getIdentificador(), new Mensaje(CodigoMensaje.M00016,
			"Se ha intentado cancelar una transacción con una conexión SQL cerrada..."));
	mensajes.put(CodigoMensaje.M00017.getIdentificador(), new Mensaje(CodigoMensaje.M00017,
			"Se ha intentado cancelar una transacción cuando el autocommit de la conexión con la base de datos estaba activado..."));
	mensajes.put(CodigoMensaje.M00018.getIdentificador(), new Mensaje(CodigoMensaje.M00018,
			"Se ha presentado un problema tratando de cancelar una transacción SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00019.getIdentificador(), new Mensaje(CodigoMensaje.M00019,
			"Se ha presentado un problema INESPERADO tratando de cancelar una transacción SQL con la fuente de información deseada..."));

	mensajes.put(CodigoMensaje.M00020.getIdentificador(), new Mensaje(CodigoMensaje.M00020,
			"Se ha intentado iniciar una transacción con una conexión SQL cerrada..."));
	mensajes.put(CodigoMensaje.M00021.getIdentificador(), new Mensaje(CodigoMensaje.M00021,
			"Se ha presentado un problema tratando de iniciar una transacción SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00022.getIdentificador(), new Mensaje(CodigoMensaje.M00022,
			"Se ha presentado un problema INESPERADO tratando de iniciar una transacción SQL con la fuente de información deseada..."));
	mensajes.put(CodigoMensaje.M00023.getIdentificador(), new Mensaje(CodigoMensaje.M00023,
			"Se ha presentado un problema consultar la informacion del tipo de institucion"));
	mensajes.put(CodigoMensaje.M00024.getIdentificador(), new Mensaje(CodigoMensaje.M00024,
			"Se ha presentado un problema consultar la informacion del tipo de institucion debido al valor ingresado"));
	mensajes.put(CodigoMensaje.M00025.getIdentificador(), new Mensaje(CodigoMensaje.M00025,
			"Se ha presentado un problema consultar la informacion del tipo de institucion ya que es un valor no admitido"));
	mensajes.put(CodigoMensaje.M00026.getIdentificador(), new Mensaje(CodigoMensaje.M00026,
			"Se ha presentado un problema consultar la informacion dl tipo de institucion ya que que ha ingresado un valor nulo"));
	mensajes.put(CodigoMensaje.M00027.getIdentificador(), new Mensaje(CodigoMensaje.M00027,
			"Se ha presentado un problema al consultar la información de los tipos de institucion"));
	mensajes.put(CodigoMensaje.M00028.getIdentificador(), new Mensaje(CodigoMensaje.M00028,
			"Se ha presentado un problema consultar la informacion de los tipos de identificion"));
	mensajes.put(CodigoMensaje.M00029.getIdentificador(), new Mensaje(CodigoMensaje.M00029,
			"Se ha presentado un problema consultar la informacion de los tipo de cuentas"));
	mensajes.put(CodigoMensaje.M00030.getIdentificador(), new Mensaje(CodigoMensaje.M00030,
			"Se ha presentado un porblema tratando de llevar a cabo la consulta de las  Cuentas"));
	mensajes.put(CodigoMensaje.M00031.getIdentificador(), new Mensaje(CodigoMensaje.M00031,
			"El DAOFactory para crear la Cuentas llego nulo..."));
	mensajes.put(CodigoMensaje.M00032.getIdentificador(), new Mensaje(CodigoMensaje.M00032,
			"Se ha presentado un problema tratando de llevar a cabo la consulta de los carnets"));
	mensajes.put(CodigoMensaje.M00033.getIdentificador(), new Mensaje(CodigoMensaje.M00033,
			"Se ha presentado un problema consultar la informacion de las ciudad"));
	mensajes.put(CodigoMensaje.M00034.getIdentificador(), new Mensaje(CodigoMensaje.M00034,
			"Se ha presentado un problema consultar la informacion de las ciudad"));
	mensajes.put(CodigoMensaje.M00035.getIdentificador(), new Mensaje(CodigoMensaje.M00035,
			"Se ha presentado un problema consultar la informacion de las ciudad"));
	mensajes.put(CodigoMensaje.M00036.getIdentificador(), new Mensaje(CodigoMensaje.M00036,
			"Se ha presentado un problema consultar la informacion de las ciudad"));
	mensajes.put(CodigoMensaje.M00037.getIdentificador(), new Mensaje(CodigoMensaje.M00037,
			"Se ha presentado un problema consultar la informacion de las ciudad"));
	mensajes.put(CodigoMensaje.M00038.getIdentificador(), new Mensaje(CodigoMensaje.M00038,
			"Se ha presentado un problema consultar la informacion de las ciudad"));
	
	}

	@Override
	public final String obtenerContendidoMensaje(final CodigoMensaje codigo, String... parametros) {
		return obtenerMensaje(codigo, parametros).getContenido();
	}

	@Override
	public final Mensaje obtenerMensaje(final CodigoMensaje codigo, String... parametros) {
		if (ObjectHelper.getObjectHelper().isNull(codigo)) {
			var mensajeUsuario=obtenerContendidoMensaje(CodigoMensaje.M00002);
			var mensajeTecnico=obtenerContendidoMensaje(CodigoMensaje.M00001);
			throw new CrossCuttingDeviUcopayException(mensajeTecnico, mensajeUsuario);
		}
		if (!codigo.isBase()) {
			var mensajeUsuario=obtenerContendidoMensaje(CodigoMensaje.M00002);
			var mensajeTecnico=obtenerContendidoMensaje(CodigoMensaje.M00004, codigo.getIdentificador());
			throw new CrossCuttingDeviUcopayException(mensajeTecnico, mensajeUsuario);
		}
		if (!mensajes.containsKey(codigo.getIdentificador())) {
			var mensajeUsuario=obtenerContendidoMensaje(CodigoMensaje.M00002);
			var mensajeTecnico=obtenerContendidoMensaje(CodigoMensaje.M00003, codigo.getIdentificador());
			throw new CrossCuttingDeviUcopayException(mensajeTecnico, mensajeUsuario);
		}
		
		/*TODO: Tarea: asegure que si tiene parametros, el contenido 
		 del mensaje se retorne con los parametros reemplazados {1},{2},{3}*/
		
		return mensajes.get(codigo.getIdentificador());
	}

}
