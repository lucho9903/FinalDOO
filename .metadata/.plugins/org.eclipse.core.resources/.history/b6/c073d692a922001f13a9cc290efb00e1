package co.edu.uco.deviucopay.data.dao.entity.concrete.azuresql;

import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import co.edu.uco.deviucopay.crosscutting.exceptions.customs.DataDeviUcopayException;
import co.edu.uco.deviucopay.crosscutting.helpers.ObjectHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.TextHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.UUIDHelper;
import co.edu.uco.deviucopay.data.dao.entity.CarnetDAO;
import co.edu.uco.deviucopay.entity.CarnetEntity;
import co.edu.uco.deviucopay.data.dao.entity.concrete.*;


public class CarnetPostgresqlDAO extends SqlConnection implements CarnetDAO {
	
	public CarnetPostgresqlDAO(final Connection connection) {
		super(connection);
		
	}

	@Override
	public List<CarnetEntity> consultar(final CarnetEntity data) {
		final StringBuilder sentenciaSql = new StringBuilder();
		sentenciaSql.append("SELECT ca.id, d.numero_carnet, ca.id as idCuenta, ca.numero_cuenta as numero_cuentaCuenta");
		sentenciaSql.append(" FROM carnet ca");
		sentenciaSql.append(" INNER JOIN cuenta cu ON ca.pais_id = cu.id");
		sentenciaSql.append(" WHERE 1=1");
		
		final List<Object> parametros = new ArrayList<>();

        if (!ObjectHelper.getObjectHelper().isNull(data.getId()) && !data.getId().equals(UUIDHelper.getDefault())) {
			sentenciaSql.append(" AND d.id = ?");
			parametros.add(data.getId());
		}
		if (!TextHelper.isNullOrEmpty(data.getNumeroCarnet())) {
			sentenciaSql.append(" AND d.nombre = ?");
			parametros.add(data.getNumeroCarnet());
		}
		if (!ObjectHelper.getObjectHelper().isNull(data.getCuenta())
				&& !ObjectHelper.getObjectHelper().isNull(data.getCuenta().getId())
				&& !data.getCuenta().getId().equals(UUIDHelper.getDefault())) {
			sentenciaSql.append(" AND d.pais_id = ?");
			parametros.add(data.getCuenta().getId());
		}

		final List<DepartamentoEntity> departamentos = new ArrayList<>();

		try (final PreparedStatement sentenciaSqlPreparada = getConexion().prepareStatement(sentenciaSql.toString())) {
			for (int i = 0; i < parametros.size(); i++) {
				sentenciaSqlPreparada.setObject(i + 1, parametros.get(i));
			}

			try (final ResultSet resultado = sentenciaSqlPreparada.executeQuery()) {
				while (resultado.next()) {
					DepartamentoEntity departamento = DepartamentoEntity.build();
					departamento.setId(UUIDHelper.convertToUUID(resultado.getString("id")));
					departamento.setNombre(resultado.getString("nombre"));

					PaisEntity pais = PaisEntity.build();
					pais.setId(UUIDHelper.convertToUUID(resultado.getString("idPais")));
					pais.setNombre(resultado.getString("nombrePais"));

					departamento.setPais(pais);

					departamentos.add(departamento);
				}
			}

		} catch (final SQLException excepcion) {
			var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00025);
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00049);
			throw new DataGPException(mensajeUsuario, mensajeTecnico, excepcion);

		} catch (final Exception excepcion) {
			var mensajeUsuario =  MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00025);
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00049);
			throw new DataGPException(mensajeUsuario, mensajeTecnico, excepcion);
		}

		return departamentos;
	}

}
